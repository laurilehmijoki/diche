#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'json'
require File.dirname(__FILE__)+"/../lib/common/database"
require File.dirname(__FILE__)+"/../lib/checker/web_site_checker"
require File.dirname(__FILE__)+"/../lib/checker/logger"

include GLI

program_desc 'Diche â€“ DIstributed web site CHEcker'

desc 'Add a URL into the database'
command [:add_url] do |c|
  c.action do |global_options,options,args|
    raise "Please enter a URL" if args.length == 0 
    raise "Invalid URL" unless args[0] =~ /^https?:\/\/.*$/
    Database.new.add_url(args[0])
  end 
end

desc 'Delete the URLs in the database'
command [:delete_urls] do |c|
  c.action do |global_options,options,args|
    Database.new.delete_urls
  end 
end

desc 'Check each URL in the database'
command [:check] do |c|
  c.desc "The region from which this operation is run. One of #{Region.all_regions.join(', ')}."
  c.flag [:r,:region]
 
  interval_min = 30
  c.desc "Interval in seconds. Determines how often the URL checker will run. Minimum #{interval_min} seconds."
  c.flag [:i,:interval]
  
  c.action do |global_options,options,args|
    region = options[:r] ? options[:r] : Region.region
    Region.set_region(region)

    interval = options[:i] ? options[:i] : interval_min
    raise "The interval must be at least #{interval_min} seconds" unless interval.to_i >= interval_min

    while true
      urls =  Database.new.load_urls
      puts "Checking URLS from region #{region} (interval #{interval} seconds, URLs to check #{urls.length})..."

      logger = Logger.new
      WebSiteChecker.new(urls, logger).check
      sleep(interval)
    end
  end 
end

desc 'List the log entries in the database'
command [:logs] do |c|
  c.action do |global_options,options,args|
    logs =  Database.new.load_url_logs
    if logs.empty?
      puts "No logs in the database" 
    else
      puts JSON.pretty_generate(logs)
    end
  end 
end

desc 'Delete the log entries from the database'
command [:delete_logs] do |c|
  c.action do |global_options,options,args|
    Database.new.delete_url_logs
  end 
end
desc 'List the URLs in the database'
command [:urls] do |c|
  c.action do |global_options,options,args|
    urls =  Database.new.load_urls
    puts "No URLs in the database" if urls.empty?
    puts urls unless urls.empty?
  end 
end
exit GLI.run(ARGV)
